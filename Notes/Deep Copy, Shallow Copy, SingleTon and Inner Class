
Clonning:

	Clonning is a process for creating an exact copy of existing object in the memory.
	
	In Java, clone() method being used from java.lang.Object class for clonning.
	
	This clone() method copies the object in which field-by-field assignment happens and returns the reference if the cloned object.
	
	The object in which we implement Clonable interface is eligible for clonning process.
	
	By default, clone method creates a shallow copy of an object
	
	To implement deep copy of an object, we need to override clone() method in respective class.

Deep Copy And  Shallow Copy:

Shallow Copy:
	
	- The default version of the clone() method is shallow copy.
	
	- The shallow copy of an object will have exact copy of all the fields.
	
	- If original object has any reference to another object as fields, then only reference of those objects are copied on the clone object.
	
	- Thus, any changes happen to original object will be make affect to copied object and vice-versa
	
Deep Copy: 
	
	- Deep Copy of an object will have exact copy of all the fields if original object has any reference to another object as fields, then copy of those object are also created using clone() method on them.
	
	- Thus, Deep copy is 100% disjoint or independent of each other.
	
SingleTon:

- A singleton class can have only one object at a time.

- After the first time, if we try to instantiate the Singleton class, the new variable also points to the first instance of the class create
  
Ways to create Singleton class:
	- Make constructor private.
 	- Create a static method that has return type as Object of the same class
	
Case-Study: 

	In multi threaded environment, two instances are trying to call getInstance. But, as it is singleton class only one instance can be created.
	
	- To make the creation of object as thread-safe the method getInstance() should be synchronized, so that the method gets executed only one thread at a time.
	
Inner Class:

	- A non-static nested class
	- This class can have access to the members of the outer class
	-If the class is inner or nested inside another class then we first need to create instance of the outer class and the using the instance of the outer class we need to instantiate inner class.
	
	Syntax:
		outerClass outer = new outerClass();
		outerClass.innerClass inner = outer.new innerClass();